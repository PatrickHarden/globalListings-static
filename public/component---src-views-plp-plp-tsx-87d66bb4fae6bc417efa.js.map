{"version":3,"sources":["webpack:///./src/views/plp/plp.tsx"],"names":["PLP","path","pageContext","plpData","countryName","propertyType","url","CountryCodes","buyObject","split","title","Header1","length","replace","Container","id","PropertyCardContainer","map","listing","index","local","list","actualAddress","address","postalAddress","thePath","toLowerCase","splice","join","description","size","charges","pType","key","to","PropertyCard","className","src","alt","image","loading","PropertyDetails","style","float","width","display","substring","Label","Info","Math","floor","random","Sidebar","listStyle","paddingRight","replaceAll","city","i","marginBottom","color","textTransform","styled","span","div","h1"],"mappings":"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","file":"component---src-views-plp-plp-tsx-87d66bb4fae6bc417efa.js","sourcesContent":["import React, { FC, useState } from \"react\"\nimport { Link } from \"gatsby\";\nimport styled from 'styled-components';\nimport { StaticImage } from \"gatsby-plugin-image\"\n//\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\n\ninterface Props {\n    path: any,\n    pageContext: any\n}\n\nconst PLP: FC<Props> = ({ path, pageContext }) => {\n    const { countryName, propertyType, plpData, CountryCodes, buyObject } = pageContext;\n\n    const nearbyCities = { \"data\": [{ \"id\": 3189937, \"wikiDataId\": \"Q189960\", \"type\": \"CITY\", \"city\": \"Sydney\", \"name\": \"Westminster\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.4995, \"longitude\": -0.1333, \"population\": 247614, \"distance\": 0.59 }, { \"id\": 43022, \"wikiDataId\": \"Q179351\", \"type\": \"ADM2\", \"city\": \"Westminster\", \"name\": \"City of Westminster\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.51291, \"longitude\": -0.15895, \"population\": 255324, \"distance\": 1.41 }, { \"id\": 46852, \"wikiDataId\": \"Q743535\", \"type\": \"CITY\", \"city\": \"Chelsea\", \"name\": \"Chelsea\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.4875, \"longitude\": -0.1684, \"population\": 60000, \"distance\": 2.23 }, { \"id\": 3002532, \"wikiDataId\": \"Q205679\", \"type\": \"ADM2\", \"city\": \"Hackney\", \"name\": \"Hackney\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.53333, \"longitude\": -0.08333, \"population\": 279665, \"distance\": 2.62 }, { \"id\": 3080040, \"wikiDataId\": \"Q125163\", \"type\": \"CITY\", \"city\": \"Islington\", \"name\": \"Islington\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.544, \"longitude\": -0.1027, \"population\": 206125, \"distance\": 2.76 }, { \"id\": 3100107, \"wikiDataId\": \"Q202088\", \"type\": \"ADM2\", \"city\": \"Camden\", \"name\": \"London Borough of Camden\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.54281, \"longitude\": -0.15942, \"population\": 262226, \"distance\": 2.82 }, { \"id\": 3185891, \"wikiDataId\": \"Q188801\", \"type\": \"ADM2\", \"city\": \"Kensington\", \"name\": \"Royal Borough of Kensington and Chelsea\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.50299, \"longitude\": -0.19314, \"population\": 156197, \"distance\": 2.84 }, { \"id\": 3420637, \"wikiDataId\": \"Q205817\", \"type\": \"ADM2\", \"city\": \"Islington\", \"name\": \"London Borough of Islington\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.54702, \"longitude\": -0.10944, \"population\": 239142, \"distance\": 2.86 }, { \"id\": 3055584, \"wikiDataId\": \"Q146690\", \"type\": \"CITY\", \"city\": \"Brixton\", \"name\": \"Brixton\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.463, \"longitude\": -0.106, \"population\": 66300, \"distance\": 3.19 }, { \"id\": 2980150, \"wikiDataId\": \"Q208152\", \"type\": \"ADM2\", \"city\": \"Hamlet\", \"name\": \"London Borough of Tower Hamlets\", \"country\": \"United Kingdom\", \"countryCode\": \"GB\", \"region\": \"England\", \"regionCode\": \"ENG\", \"latitude\": 51.51667, \"longitude\": -0.05, \"population\": 317705, \"distance\": 3.4 }], \"metadata\": { \"currentOffset\": 0, \"totalCount\": 263 } };\n\n    const url = path.split('/');\n\n    let temp: string;\n\n    return (\n        <Layout>\n            <SEO title=\"CBRE Properties\" />\n            <Header1>{plpData && plpData.length} {url[url.length - 1].replace('-', ' ')}</Header1>\n            <Container>\n                <div id=\"plpContainer\">\n                    <PropertyCardContainer>\n                        {plpData && plpData[0] && plpData.map((listing: any, index: any) => {\n                            // console.log(listing)\n                            const list = listing.listing;\n                            const actualAddress = listing.address;\n                            const postalAddresses = 'Common.PostalAddresses';\n                            let local;\n                            let postalAddress: any = {}\n                            if (actualAddress[postalAddresses] && actualAddress[postalAddresses][0]) {\n                                postalAddress = actualAddress[postalAddresses][0]\n                                local = postalAddress['Common.Locallity'] || actualAddress['Common.Locallity'] || null;\n                            }\n\n                            let thePath = path;\n                            if (local) {\n                                local = local.replace(/\\s+/g, '-').toLowerCase();\n                                if (url.length < 6) {\n                                    url.splice(url.length - 1, 0, local)\n                                }\n                                thePath = url.join('/')\n                            }\n\n                            const description = list['Common.LongDescription'] && list['Common.LongDescription'][0] && list['Common.LongDescription'][0]['Common.Text'];\n\n                            const size = list['Common.TotalSize'][0];\n\n                            const charges = list['Common.Charges'][0];\n\n                            const pType = list['Common.UsageType'];\n\n                            temp = pType;\n\n\n\n                            // console.log(list, charges)\n\n                            return (\n                                <Link key={index + listing.key} to={thePath + '/' + listing.key}>\n                                    <PropertyCard className=\"propertyCard\" key={index + listing.key + ' propertyCard'}>\n                                        <img className=\"favorite-icon\" src=\"https://uatlistingssearchcbreeun.blob.core.windows.net/images/GL-Icons/icon-star-line.png\" alt=\"favorite icon\" />\n                                        {listing.image &&\n                                            <img src={'https://www.cbre.us' + listing.image} loading=\"lazy\" />\n                                        }\n                                        <PropertyDetails>\n                                            <div className=\"address\" style={{float: 'left', width: '60%', display: 'block'}}>\n                                                <h3>{postalAddress['Common.Line1']} {postalAddress['Common.Line3'] && postalAddress['Common.Line3']}</h3>\n                                                <h5>\n                                                    {postalAddress['Common.Locallity'] && <span>{postalAddress['Common.Locallity']},</span>}\n                                                    {postalAddress['Common.Region'] && <span>{postalAddress['Common.Region']}</span>}\n                                                </h5>\n                                                <p>{description && description.substring(0, 250)}</p>\n                                            </div>\n                                            <div className=\"propertyInfo\">\n                                                <p><Label>Space Available</Label> <Info>{size['Common.Size']} {size['Common.Units']}</Info></p>\n                                                <p><Label>Spaces</Label><Info>{Math.floor(Math.random() * 5)} Spaces</Info></p>\n                                                <p><Label>Price</Label> <Info>{charges['Common.ChargeKind']}</Info></p>\n                                                <p><Label>Status</Label> <Info>Available Now</Info></p>\n                                                <p><Label>Type</Label> <Info>{pType}</Info></p>\n                                            </div>\n                                        </PropertyDetails>\n                                    </PropertyCard>\n                                </Link>\n                            )\n                        })}\n                    </PropertyCardContainer>\n                    <Sidebar>\n                        <ul style={{ listStyle: 'none', paddingRight: '20px' }}>\n                            <h3>{url[url.length - 1].replace('-', ' ')} around {url[url.length - 2].replaceAll('-', ' ')}</h3>\n                            {nearbyCities.data.map((city: any, i: number) => (\n                                <li style={{marginBottom: '8px'}}>\n                                    <Link to=\"/\" style={{color: '#006A4D', textTransform: 'capitalize'}}>\n                                        {url[url.length - 1].replace('-', ' ')} in {city.city}\n                                    </Link>\n                                </li>\n                            ))}\n                        </ul>\n                    </Sidebar>\n                </div>\n                {/* <div id=\"map\">\n                <Map\n                    coordinateArray={coordinateArray}\n                />\n            </div> */}\n            </Container>\n        </Layout>\n    )\n};\n\nexport default PLP;\n\nconst Label = styled.span`\n    font-size: 12px;\n    text-transform: uppercase;\n    color: #666666;\n`;\n\nconst Info = styled.span`\n    font-size:14px;\n    color:#333;\n    float:right;\n    margin-left:50px;\n`\n\nconst Sidebar = styled.div`\n    width:27%;\n    ul { \n        border: 1px solid #CAD1D3;\n        padding-top:20px;\n        padding-bottom:20px;\n        margin-top:0;\n        a {\n            text-decoration: none;\n            font-size:16px;\n        }\n    }\n    margin-left:0;\n    position:relative;\n    left:1%;\n    margin-top:25px;a\n    li {\n        color: #006A4D !important;\n    }\n    h3 {\n        text-transform: capitalize;\n        color: #333;\n        font-size:21px;\n        margin-top:0;\n    }\n`\n\nconst PropertyCard = styled.div`\n    margin: 30px 0;\n    width:936px;\n    height:250px;\n    border: 1px solid #CAD1D3;\n    display:flex;\n    img {\n        max-width:208px;\n        height:100%;\n        float:left;\n    }\n    position:relative;\n    .favorite-icon {\n        position:absolute;\n        height:18px;\n        right:5px;\n        top:5px;\n    }\n`;\n\nconst PropertyDetails = styled.div`\n    display:block;\n    float:left;\n    padding: 10px 15px;\n    h3, p {\n        color: #333;\n        text-decoration:none;\n    }\n    h3 {\n        text-transform: capitalize;\n    }\n    > div > h3 {\n        font-size:21px;\n        margin-top:16px;\n        margin-bottom:8px;\n    }\n    .propertyInfo {\n        display:block;\n        float:right;\n        padding-right:25px;\n        padding-top:12px;\n    }\n    .address {\n        p {\n            font-size:16px;\n        }\n    }\n    h5 {\n        color: #666666;\n        font-size:16px;\n        margin-top:0px;\n    }\n`;\n\nconst Container = styled.div`\n    font-familty: sans-serif;\n    display: flex;\n    justify-content: space-between;\n    width:90%;\n    margin: 0 auto;\n    #plpContainer {\n        width:100%;\n        display:flex;\n    }\n    #map  {\n        width:50%;\n        position:sticky;\n        top:121px;\n        max-height:calc(100vh - 120px)\n    }\n`;\n\nconst PropertyCardContainer = styled.div`\n    width:75%;\n    > a {\n        width:100%;\n        float:left;\n        height:250px;\n        margin-bottom:45px;\n    }\n`;\n\nconst Header1 = styled.h1`\n    font-size: 24px;\n    color: #333;\n    width:90%;\n    display:block;\n    margin: 0 auto;\n    margin-top:30px;\n    text-transform: capitalize;\n`;\n\n\n\n    // const Codes = CountryCodes.buckets.map(country => {\n    //     return country.key.substring(0, 2);\n    // })\n\n    // filter down coords that aren't within country\n    // const listings = plpData.filter(listing => {\n    //     const countryCode = listing.address['Common.Country'].toLowerCase();\n    //     console.log(countryCode)\n    //     if (Codes.includes(countryCode) || countryName.toLowerCase() === countryCode){\n    //         return false;\n    //     }\n\n    //     return true;\n    // }).map(function(listing) { return listing });\n\n    // This was used to convert the coordinates into a data model compatible with google maps\n    // const coordinateArray = plpData.map((listing: any, index: any) => {\n    //     let coord = listing.coords;\n    //     coord.lng = coord.lon;\n    //     delete coord.lon;\n    //     return coord;\n    // });\n\n\n    // reduce coordinateArray to only include coords which are within the country"],"sourceRoot":""}