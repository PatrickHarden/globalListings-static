{"version":3,"sources":["webpack:///./src/views/plp/plp.tsx"],"names":["PLP","path","pageContext","plpData","countryName","propertyType","CountryCodes","buyObject","title","Header1","length","Container","id","PropertyCardContainer","map","listing","index","local","list","actualAddress","address","postalAddress","url","split","thePath","replace","toLowerCase","splice","join","description","console","log","key","to","PropertyCard","className","image","src","loading","PropertyDetails","substring","Sidebar","styled","div","h1"],"mappings":"2FAAA,gFAkFeA,UArEQ,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACOC,GAAqCD,EAAhEE,YAAgEF,EAAnDG,aAAmDH,EAArCC,SAAqCD,EAA5BI,aAA4BJ,EAAdK,UAE1D,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,MAAM,oBACX,kBAACC,EAAD,KAAUN,GAAWA,EAAQO,OAA7B,eACA,kBAACC,EAAD,KACI,yBAAKC,GAAG,gBACJ,kBAACC,EAAD,KACKV,GAAWA,EAAQ,IAAMA,EAAQW,KAAI,SAACC,EAAcC,GACjD,IAGIC,EAHEC,EAAOH,EAAQA,QACfI,EAAgBJ,EAAQK,QAG1BC,EAAqB,GACrBF,EAHoB,2BAGcA,EAHd,0BAG6C,KAEjEF,GADAI,EAAgBF,EAJI,0BAI2B,IACzB,qBAAuBA,EAAc,qBAAuB,MAGtF,IAAMG,EAAMrB,EAAKsB,MAAM,KACnBC,EAAUvB,EACVgB,IACAA,EAAQA,EAAMQ,QAAQ,OAAQ,KAAKC,cAC/BJ,EAAIZ,OAAS,GACbY,EAAIK,OAAOL,EAAIZ,OAAS,EAAG,EAAGO,GAElCO,EAAUF,EAAIM,KAAK,MAGvB,IAAMC,EAAcX,EAAK,2BAA6BA,EAAK,0BAA0B,IAAMA,EAAK,0BAA0B,GAAG,eAK7H,OAFAY,QAAQC,IAAIP,EAAU,IAAMT,EAAQiB,KAGhC,kBAAC,IAAD,CAAMA,IAAKhB,EAAQD,EAAQiB,IAAKC,GAAIT,EAAU,IAAMT,EAAQiB,KACxD,kBAACE,EAAD,CAAcC,UAAU,eAAeH,IAAKhB,EAAQD,EAAQiB,IAAM,iBAC7DjB,EAAQqB,OACL,yBAAKC,IAAK,sBAAwBtB,EAAQqB,MAAOE,QAAQ,SAE7D,kBAACC,EAAD,KACI,4BAAKlB,EAAc,gBAAnB,IAAqCA,EAAc,iBAAmBA,EAAc,iBACpF,2BAAIQ,GAAeA,EAAYW,UAAU,EAAG,aAOpE,kBAACC,EAAD,KACI,4BACI,wDAkB5B,IAAMA,EAAUC,IAAOC,IAAV,mEAAGD,CAAH,+CAMPR,EAAeQ,IAAOC,IAAV,wEAAGD,CAAH,+HAaZH,EAAkBG,IAAOC,IAAV,2EAAGD,CAAH,kHAaf/B,EAAY+B,IAAOC,IAAV,qEAAGD,CAAH,gNAkBT7B,EAAwB6B,IAAOC,IAAV,iFAAGD,CAAH,2EAUrBjC,EAAUiC,IAAOE,GAAV,mEAAGF,CAAH","file":"component---src-views-plp-plp-tsx-14710c9051ca90744221.js","sourcesContent":["import React, { FC } from \"react\"\nimport { Link } from \"gatsby\";\nimport styled from 'styled-components';\nimport { StaticImage } from \"gatsby-plugin-image\"\n//\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\n\ninterface Props {\n    path: any,\n    pageContext: any\n}\n\nconst PLP: FC<Props> = ({ path, pageContext }) => {\n    const { countryName, propertyType, plpData, CountryCodes, buyObject } = pageContext\n\n    return (\n        <Layout>\n            <SEO title=\"CBRE Properties\" />\n            <Header1>{plpData && plpData.length} Properties</Header1>\n            <Container>\n                <div id=\"plpContainer\">\n                    <PropertyCardContainer>\n                        {plpData && plpData[0] && plpData.map((listing: any, index: any) => {\n                            const list = listing.listing;\n                            const actualAddress = listing.address;\n                            const postalAddresses = 'Common.PostalAddresses';\n                            let local;\n                            let postalAddress: any = {}\n                            if (actualAddress[postalAddresses] && actualAddress[postalAddresses][0]) {\n                                postalAddress = actualAddress[postalAddresses][0]\n                                local = postalAddress['Common.Locallity'] || actualAddress['Common.Locallity'] || null;\n                            }\n\n                            const url = path.split('/');\n                            let thePath = path;\n                            if (local) {\n                                local = local.replace(/\\s+/g, '-').toLowerCase();\n                                if (url.length < 6){\n                                    url.splice(url.length - 1, 0, local)\n                                }\n                                thePath = url.join('/')\n                            }\n\n                            const description = list['Common.LongDescription'] && list['Common.LongDescription'][0] && list['Common.LongDescription'][0]['Common.Text'];\n\n\n                            console.log(thePath + '/' + listing.key)\n\n                            return (\n                                <Link key={index + listing.key} to={thePath + '/' + listing.key}>\n                                    <PropertyCard className=\"propertyCard\" key={index + listing.key + ' propertyCard'}>\n                                        {listing.image &&\n                                            <img src={'https://www.cbre.us' + listing.image} loading=\"lazy\" />\n                                        }\n                                        <PropertyDetails>\n                                            <h3>{postalAddress['Common.Line1']} {postalAddress['Common.Line3'] && postalAddress['Common.Line3']}</h3>\n                                            <p>{description && description.substring(0, 250)}</p>\n                                        </PropertyDetails>\n                                    </PropertyCard>\n                                </Link>\n                            )\n                        })}\n                    </PropertyCardContainer>\n                    <Sidebar>\n                        <ul>\n                            <li>\n                                Sidebar properties\n                            </li>\n                        </ul>\n                    </Sidebar>\n                </div>\n                {/* <div id=\"map\">\n                <Map\n                    coordinateArray={coordinateArray}\n                />\n            </div> */}\n            </Container>\n        </Layout>\n    )\n};\n\nexport default PLP;\n\nconst Sidebar = styled.div`\n    width:25%;\n    margin-left:5%;\n    margin-top:25px;\n`\n\nconst PropertyCard = styled.div`\n    margin: 30px 0;\n    width:936px;\n    height:250px;\n    border: 1px solid #CAD1D3;\n    display:flex;\n    img {\n        max-width:208px;\n        height:100%;\n        float:left;\n    }\n`;\n\nconst PropertyDetails = styled.div`\n    display:block;\n    float:left;\n    padding: 0 15px;\n    h3, p {\n        color: #333;\n        text-decoration:none;\n    }\n    h3 {\n        text-transform: capitalize;\n    }\n`;\n\nconst Container = styled.div`\n    font-familty: sans-serif;\n    display: flex;\n    justify-content: space-between;\n    width:90%;\n    margin: 0 auto;\n    #plpContainer {\n        width:100%;\n        display:flex;\n    }\n    #map  {\n        width:50%;\n        position:sticky;\n        top:121px;\n        max-height:calc(100vh - 120px)\n    }\n`;\n\nconst PropertyCardContainer = styled.div`\n    width:75%;\n    > a {\n        width:100%;\n        float:left;\n        height:250px;\n        margin-bottom:45px;\n    }\n`;\n\nconst Header1 = styled.h1`\n    font-size: 24px;\n    color: #333;\n    width:90%;\n    display:block;\n    margin: 0 auto;\n    margin-top:30px;\n`;\n\n\n\n    // const Codes = CountryCodes.buckets.map(country => {\n    //     return country.key.substring(0, 2);\n    // })\n\n    // filter down coords that aren't within country\n    // const listings = plpData.filter(listing => {\n    //     const countryCode = listing.address['Common.Country'].toLowerCase();\n    //     console.log(countryCode)\n    //     if (Codes.includes(countryCode) || countryName.toLowerCase() === countryCode){\n    //         return false;\n    //     }\n\n    //     return true;\n    // }).map(function(listing) { return listing });\n\n    // This was used to convert the coordinates into a data model compatible with google maps\n    // const coordinateArray = plpData.map((listing: any, index: any) => {\n    //     let coord = listing.coords;\n    //     coord.lng = coord.lon;\n    //     delete coord.lon;\n    //     return coord;\n    // });\n\n\n    // reduce coordinateArray to only include coords which are within the country"],"sourceRoot":""}